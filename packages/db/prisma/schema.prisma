// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Table - Stores Customer & Admin Details
model User {
  id              String   @id @default(uuid())
  firstName       String   @db.VarChar(25) // Max 25 characters
  lastName        String   @db.VarChar(25) // Max 25 characters
  email           String   @unique
  countryCode     String   @default("+91")
  primaryMobile   String   @unique @db.VarChar(10) // 10-digit only
  password        String
  role            Role     @default(CUSTOMER)
  dob             DateTime
  secondaryMobile String?  @db.VarChar(10) // Optional 10-digit
  createdAt       DateTime @default(now())

  // One-to-Many: A User can have multiple Addresses
  addresses Address[]

  // One-to-Many: A User can place multiple Orders
  orders Order[]

  // One-to-Many: An Admin manages multiple Products
  inventory Product[] @relation("AdminInventory")
}

// Address Table - Stores Addresses for Users
model Address {
  id      String      @id @default(uuid())
  userId  String
  type    AddressType
  street  String
  city    String
  state   String
  country String
  zipCode String

  // Many-to-One: An Address belongs to a User
  user User @relation(fields: [userId], references: [id])
}

// Product Table - Stores Product Details (Managed by Admins)
model Product {
  id          String   @id @default(uuid())
  adminId     String
  name        String
  description String?
  price       Float
  stock       Int
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  // Many-to-Many: A Product can belong to multiple Carts
  carts CartProduct[]

  // Many-to-One: A Product is managed by an Admin (User)
  admin User @relation(fields: [adminId], references: [id], name: "AdminInventory")
}

// CartProduct Table - Many-to-Many Relation Between Cart and Product
model CartProduct {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int

  // Many-to-One: A CartProduct belongs to a Cart
  cart Cart @relation(fields: [cartId], references: [id])

  // Many-to-One: A CartProduct belongs to a Product
  product Product @relation(fields: [productId], references: [id])
}

// Cart Table - Represents a Shopping Cart (One Cart belongs to One Order)
model Cart {
  id      String  @id @default(uuid())
  orderId String? @unique // One-to-One: One Cart belongs to one Order

  // One-to-Many: A Cart can contain multiple CartProduct entries
  cartProducts CartProduct[]

  // One-to-One: A Cart is linked to a single Order
  order Order? @relation(fields: [orderId], references: [id])
}

// Order Table - Stores Order Details (Linked to One Cart)
model Order {
  id          String      @id @default(uuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())

  // Many-to-One: An Order belongs to a User
  user User @relation(fields: [userId], references: [id])

  // One-to-One: An Order is linked to a single Cart
  cart Cart?

  // One-to-One: An Order has a single Payment
  payment Payment?
}

// Payment Table - Stores Payment Details (Linked to One Order)
model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  // One-to-One: A Payment is linked to a single Order
  order Order @relation(fields: [orderId], references: [id])
}

// Role Enum - Defines User Roles
enum Role {
  ADMIN
  CUSTOMER
}

// AddressType Enum - Defines Address Types
enum AddressType {
  PERMANENT
  CURRENT
  OTHER
}

// OrderStatus Enum - Defines Possible Order Statuses
enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// PaymentStatus Enum - Defines Possible Payment Statuses
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
